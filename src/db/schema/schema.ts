import {
	pgTable,
	serial,
	boolean,
	timestamp,
	index,
	foreignKey,
	real,
	text,
	integer,
	bigint,
} from "drizzle-orm/pg-core";

export const runs = pgTable("runs", {
	id: serial().primaryKey().notNull(),
	game: text().notNull(),
	clients: bigint({ mode: 'number' }).notNull(),
	width: bigint({ mode: 'number' }).notNull(),
	height: bigint({ mode: 'number' }).notNull(),
	duration: bigint({ mode: 'number' }).notNull(),
	audio: boolean().notNull(),
	frameRate: bigint({ mode: 'number' }).notNull(),
	hardware: boolean().notNull(),
	timestamp: timestamp().notNull(),
	gameStartedAt: timestamp(),
});

export const performanceMetrics = pgTable(
	"performance_metrics",
	{
		id: serial().primaryKey().notNull(),
		runId: bigint({ mode: 'number' }).notNull(),
		timestamp: timestamp().notNull(),
		gpuUtilization: real().notNull(),
		workingSetPrivate: real().notNull(),
		cpuUsage: real().notNull(),
		bytesReceived: real().notNull(),
		bytesSent: real().notNull(),
		packetsReceived: real().notNull(),
		packetsSent: real().notNull(),
		nvGpuPower: real(),
		nvGpuTemp: real(),
		nvGpuMemTemp: real(),
		nvGpuSm: real(),
		nvGpuMem: real(),
		nvGpuEnc: real(),
		nvGpuDec: real(),
		nvGpuJpg: real(),
		nvGpuOfa: real(),
		nvGpuMemClock: real(),
		nvGpuClock: real(),
	},
	(table) => [
		index("idx_performance_metrics_run_id").using(
			"btree",
			table.runId.asc(),
		),
		index("idx_performance_metrics_timestamp").using(
			"btree",
			table.timestamp.asc(),
		),
		foreignKey({
			columns: [table.runId],
			foreignColumns: [runs.id],
			name: "performance_metrics_run_id_fkey",
		}),
	],
);

export const delayMeasurements = pgTable(
	"delay_measurements",
	{
		id: serial().primaryKey().notNull(),
		runId: bigint({ mode: 'number' }).notNull(),
		clientId: bigint({ mode: 'number' }).notNull(),
		timestamp: timestamp().notNull(),
		delay: real().notNull(),
	},
	(table) => [
		index("idx_delay_measurements_run_id").using(
			"btree",
			table.runId.asc(),
		),
		index("idx_delay_measurements_timestamp").using(
			"btree",
			table.timestamp.asc(),
		),
		foreignKey({
			columns: [table.runId],
			foreignColumns: [runs.id],
			name: "delay_measurements_run_id_fkey",
		}),
	],
);

export const webrtcDataMetrics = pgTable(
	"webrtc_data_metrics",
	{
		id: serial().primaryKey().notNull(),
		runId: bigint({ mode: 'number' }).notNull(),
		clientId: bigint({ mode: 'number' }).notNull(),
		timestamp: timestamp().notNull(),
		label: text(),
		protocol: text(),
		dataChannelIdentifier: bigint({ mode: 'number' }),
		state: text(),
		messagesSent: bigint({ mode: 'number' }),
		messagesSentPerS: real(),
		bytesSent: bigint({ mode: 'number' }),
		bytesSentInBitsPerS: real(),
		messagesReceived: bigint({ mode: 'number' }),
		messagesReceivedPerS: real(),
		bytesReceived: bigint({ mode: 'number' }),
		bytesReceivedInBitsPerS: real(),
	},
	(table) => [
		index("idx_webrtc_data_metrics_run_id").using(
			"btree",
			table.runId.asc(),
		),
		index("idx_webrtc_data_metrics_timestamp").using(
			"btree",
			table.timestamp.asc(),
		),
		foreignKey({
			columns: [table.runId],
			foreignColumns: [runs.id],
			name: "webrtc_data_metrics_run_id_fkey",
		}),
	],
);

export const webrtcAudioMetrics = pgTable(
	"webrtc_audio_metrics",
	{
		id: serial().primaryKey().notNull(),
		runId: bigint({ mode: 'number' }).notNull(),
		clientId: bigint({ mode: 'number' }).notNull(),
		timestamp: timestamp().notNull(),
		ssrc: bigint({ mode: 'number' }),
		kind: text(),
		transportId: text(),
		codecId: text(),
		codec: text(),
		jitter: real(),
		packetsLost: bigint({ mode: 'number' }),
		playoutId: text(),
		trackIdentifier: text(),
		mid: bigint({ mode: 'number' }),
		remoteId: text(),
		packetsReceived: bigint({ mode: 'number' }),
		packetsReceivedPerS: real(),
		packetsDiscarded: bigint({ mode: 'number' }),
		packetsDiscardedPerS: real(),
		fecPacketsReceived: bigint({ mode: 'number' }),
		fecPacketsReceivedPerS: real(),
		fecPacketsDiscarded: bigint({ mode: 'number' }),
		fecPacketsDiscardedPerS: real(),
		bytesReceived: bigint({ mode: 'number' }),
		bytesReceivedInBitsPerS: real(),
		headerBytesReceived: bigint({ mode: 'number' }),
		headerBytesReceivedInBitsPerS: real(),
		lastPacketReceivedTimestamp: text(),
		jitterBufferDelay: real(),
		jitterBufferDelayPerJitterBufferEmittedCountInMs: real(),
		jitterBufferTargetDelay: real(),
		jitterBufferTargetDelayPerJitterBufferEmittedCountInMs: real(),
		jitterBufferMinimumDelay: real(),
		jitterBufferMinimumDelayPerJitterBufferEmittedCountInMs: real(),
		jitterBufferEmittedCount: bigint({ mode: 'number' }),
		totalSamplesReceived: bigint({ mode: 'number' }),
		totalSamplesReceivedPerS: real(),
		concealedSamples: bigint({ mode: 'number' }),
		concealedSamplesPerS: real(),
		concealedSamplesPerTotalSamplesReceived: real(),
		silentConcealedSamples: bigint({ mode: 'number' }),
		silentConcealedSamplesPerS: real(),
		concealmentEvents: bigint({ mode: 'number' }),
		insertedSamplesForDeceleration: bigint({ mode: 'number' }),
		insertedSamplesForDecelerationPerS: real(),
		removedSamplesForAcceleration: bigint({ mode: 'number' }),
		removedSamplesForAccelerationPerS: real(),
		audioLevel: real(),
		totalAudioEnergy: real(),
		audioLevelInRMS: real("audio_level_in_rms"),
		totalSamplesDuration: real(),
		totalProcessingDelay: real(),
		totalProcessingDelayPerJitterBufferEmittedCountInMs: real(),
		jitterBufferFlushes: bigint({ mode: 'number' }),
		delayedPacketOutageSamples: bigint({ mode: 'number' }),
		relativePacketArrivalDelay: real(),
		interruptionCount: bigint({ mode: 'number' }),
		totalInterruptionDuration: real(),
	},
	(table) => [
		index("idx_webrtc_audio_metrics_run_id").using(
			"btree",
			table.runId.asc(),
		),
		index("idx_webrtc_audio_metrics_timestamp").using(
			"btree",
			table.timestamp.asc(),
		),
		foreignKey({
			columns: [table.runId],
			foreignColumns: [runs.id],
			name: "webrtc_audio_metrics_run_id_fkey",
		}),
	],
);

export const webrtcVideoMetrics = pgTable(
	"webrtc_video_metrics",
	{
		id: serial().primaryKey().notNull(),
		runId: bigint({ mode: 'number' }).notNull(),
		clientId: bigint({ mode: 'number' }).notNull(),
		timestamp: timestamp().notNull(),
		ssrc: bigint({ mode: 'number' }),
		kind: text(),
		transportId: text(),
		codecId: text(),
		codec: text(),
		jitter: real(),
		packetsLost: bigint({ mode: 'number' }),
		trackIdentifier: text(),
		mid: bigint({ mode: 'number' }),
		packetsReceived: bigint({ mode: 'number' }),
		packetsReceivedPerS: real(),
		bytesReceived: bigint({ mode: 'number' }),
		bytesReceivedInBitsPerS: real(),
		headerBytesReceived: bigint({ mode: 'number' }),
		headerBytesReceivedInBitsPerS: real(),
		retransmittedPacketsReceived: bigint({ mode: 'number' }),
		retransmittedPacketsReceivedPerS: real(),
		retransmittedBytesReceived: bigint({ mode: 'number' }),
		retransmittedBytesReceivedInBitsPerS: real(),
		rtxSsrc: bigint({ mode: 'number' }),
		lastPacketReceivedTimestamp: text(),
		jitterBufferDelay: real(),
		jitterBufferDelayPerJitterBufferEmittedCountInMs: real(),
		jitterBufferTargetDelay: real(),
		jitterBufferTargetDelayPerJitterBufferEmittedCountInMs: real(),
		jitterBufferMinimumDelay: real(),
		jitterBufferMinimumDelayPerJitterBufferEmittedCountInMs: real(),
		jitterBufferEmittedCount: bigint({ mode: 'number' }),
		framesReceived: bigint({ mode: 'number' }),
		framesReceivedPerS: real(),
		frameWidth: bigint({ mode: 'number' }),
		frameHeight: bigint({ mode: 'number' }),
		framesPerSecond: bigint({ mode: 'number' }),
		framesDecoded: bigint({ mode: 'number' }),
		framesDecodedPerS: real(),
		keyFramesDecoded: bigint({ mode: 'number' }),
		keyFramesDecodedPerS: real(),
		framesDropped: bigint({ mode: 'number' }),
		totalDecodeTime: real(),
		totalDecodeTimePerFramesDecodedInMs: real(),
		totalProcessingDelay: real(),
		totalProcessingDelayPerJitterBufferEmittedCountInMs: real(),
		totalAssemblyTime: real(),
		totalAssemblyTimePerFramesAssembledFromMultiplePacketsInMs: real(),
		framesAssembledFromMultiplePackets: bigint({ mode: 'number' }),
		totalInterFrameDelay: real(),
		totalInterFrameDelayPerFramesDecodedInMs: real(),
		totalSquaredInterFrameDelay: real(),
		interFrameDelayStDevInMs: real(),
		pauseCount: bigint({ mode: 'number' }),
		totalPausesDuration: real(),
		freezeCount: bigint({ mode: 'number' }),
		totalFreezesDuration: real(),
		decoderImplementation: text(),
		firCount: bigint({ mode: 'number' }),
		pliCount: bigint({ mode: 'number' }),
		nackCount: bigint({ mode: 'number' }),
		googTimingFrameInfo: text(),
		powerEfficientDecoder: boolean(),
		minPlayoutDelay: real(),
	},
	(table) => [
		index("idx_webrtc_video_metrics_run_id").using(
			"btree",
			table.runId.asc(),
		),
		index("idx_webrtc_video_metrics_timestamp").using(
			"btree",
			table.timestamp.asc(),
		),
		foreignKey({
			columns: [table.runId],
			foreignColumns: [runs.id],
			name: "webrtc_video_metrics_run_id_fkey",
		}),
	],
);

export const webrtcCandidatePairMetrics = pgTable(
	"webrtc_candidate_pair_metrics",
	{
		id: serial().primaryKey().notNull(),
		runId: bigint({ mode: 'number' }).notNull(),
		clientId: bigint({ mode: 'number' }).notNull(),
		timestamp: timestamp().notNull(),
		transportId: text(),
		localCandidateId: text(),
		remoteCandidateId: text(),
		state: text(),
		priority: bigint({ mode: 'number' }),
		nominated: boolean(),
		writable: boolean(),
		packetsSent: bigint({ mode: 'number' }),
		packetsSentPerS: real(),
		bytesSent: bigint({ mode: 'number' }),
		bytesSentInBitsPerS: real(),
		packetsReceived: bigint({ mode: 'number' }),
		packetsReceivedPerS: real(),
		bytesReceived: bigint({ mode: 'number' }),
		bytesReceivedInBitsPerS: real(),
		totalRoundTripTime: real(),
		totalRoundTripTimePerResponsesReceived: real(),
		currentRoundTripTime: real(),
		availableOutgoingBitrate: real(),
		requestsReceived: bigint({ mode: 'number' }),
		requestsSent: bigint({ mode: 'number' }),
		responsesReceived: bigint({ mode: 'number' }),
		responsesSent: bigint({ mode: 'number' }),
		consentRequestsSent: bigint({ mode: 'number' }),
		packetsDiscardedOnSend: bigint({ mode: 'number' }),
		bytesDiscardedOnSend: bigint({ mode: 'number' }),
		lastPacketReceivedTimestamp: text(),
		lastPacketSentTimestamp: text(),
	},
	(table) => [
		index("idx_webrtc_candidate_pair_metrics_run_id").using(
			"btree",
			table.runId.asc(),
		),
		index("idx_webrtc_candidate_pair_metrics_timestamp").using(
			"btree",
			table.timestamp.asc(),
		),
		foreignKey({
			columns: [table.runId],
			foreignColumns: [runs.id],
			name: "webrtc_candidate_pair_metrics_run_id_fkey",
		}),
	],
);
